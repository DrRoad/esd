gridstation <- function(Y,i=1,verbose=FALSE,xlim=NULL,ylim=NULL) {
  if (verbose) print(paste('gridstation'))
  require(LatticeKrig)

  if (is.null(xlim)) xlim <- range(lon(Y))
  if (is.null(ylim)) ylim <- range(lat(Y))

  ## Get data on the topography on the 5-minute resolution
  data(etopo5)
  etopo5 <- subset(etopo5,
                   is=list(lon=range(lon(Y))+c(-1,1),
                           lat=range(lat(Y))+c(-1,1)))
  ## Mask the sea: elevations below 1m below sea level is masked.
  etopo5[etopo5<=-1] <- NA

  ## Set the grid to be the same as that of etopo5:
  grid <- structure(list(x=lon(etopo5),y=lat(etopo5)),class='gridList')

  ## Flag dubplicated stations:
  ok <- !(duplicated(lon(Y)) & duplicated(lat(Y)))

  if (verbose) print(paste(sum(ok),'locations'))

  obj <- LatticeKrig( x=cbind(lon(Y)[ok],lat(Y)[ok]),
                      y=Y[ok,i],Z=alt(Y)[ok])

  w <- predictSurface(obj, grid.list = grid,Z=etopo5)
  w$z[is.na(etopo5)] <- NA

## Get rid of packages that have functions of same name:
  detach("package:LatticeKrig")
  detach("package:fields")
  detach("package:spam")
  detach("package:grid")
  detach("package:maps")

  ## Convert the results from LatticeKrig to esd:
  W <- w$z
  attr(W,'variable') <- varid(Y)[1]
  attr(W,'unit') <- unit(Y)[1]
  attr(W,'longitude') <- w$x
  attr(W,'latitude') <- w$y

  ## Make a projection that zooms in on the Barents region

  invisible(W)
}

## Script that uses gridding to transform the station map into a regular
## map making use of elevation.
pca2eof <- function(x,verbose=FALSE,xlim=NULL,ylim=NULL) {
  if (verbose) print('pca2eof')
  stopifnot(!inherits(x,'pca'))
  y <- x
  z <- attr(x,'pattern')
  attr(z,'longitude') <- lon(x)
  attr(z,'latitude') <- lat(x)
  attr(z,'altitude') <- alt(x)
  d <- dim(z)
  Z <- list()
  for (i in 1:d[2]) {
    Z[[i]] <- gridstation(z,i,verbose=verbose)
  }
  z <- unlist(Z)
  dim(z) <- c(dim(Z[[1]]),d[2])
  z -> attr(y,'pattern')
  attr(y,'longitude') <- lon(Z[[1]])
  attr(y,'latitude') <- lat(Z[[1]])
  attr(y,'dimensions') <- c(dim(Z[[1]]),d[2])
  attr(y,'variable') <- varid(x)[1]
  attr(y,'unit') <- unit(x)[1]
  attr(y,'longname') <- attr(x,'longname')[1]
  class(y) <- c('eof','field',class(x)[-c(1,2)])
  return(y)
}

station2field <- function(x,verbose=FALSE,xlim=NULL,ylim=NULL) {
    if (verbose) print('station2field')
    stopifnot(!inherits(x,'station'))
    x <- pcafill(x,verbose=verbose)
    pca <- PCA(x)
    eof <- pca2eof(pca,verbose=verbose)
    X <- eof2field(eof,verbose=verbose)
    return(X)
}
